generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  password    String
  role        UserRole     @default(CUSTOMER)
  isActive    Boolean      @default(true)
  address     String?
  phone       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orders      Order[]
  permissions Permission[]
}

model Permission {
  id        String   @id @default(uuid())
  userId    String
  module    String // e.g., "products", "categories", "orders"
  canView   Boolean  @default(false)
  canCreate Boolean  @default(false)
  canEdit   Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, module])
}

model Category {
  id            String     @id @default(uuid())
  name          String
  nameAr        String?
  description   String?
  descriptionAr String?
  slug          String     @unique
  imageUrl      String?
  isActive      Boolean    @default(true)
  parentId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryToSubcategory")
  products      Product[]
}

model Product {
  id            String             @id @default(uuid())
  name          String
  nameAr        String?
  description   String?
  descriptionAr String?
  price         Float
  imageUrl      String?
  categoryId    String
  origin        String?
  inStock       Boolean            @default(true)
  stockQuantity Int                @default(0)
  sku           String?            @unique
  weight        Float?
  dimensions    String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  bundleItems   BundleItem[]       @relation("BundleProducts")
  bundles       BundleItem[]       @relation("ContainedInBundle")
  orderItems    OrderItem[]
  category      Category           @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  promotions    ProductPromotion[]
  variations    ProductVariation[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model VariationSize {
  id          String             @id @default(uuid())
  name        String
  value       Int
  displayName String
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  variations  ProductVariation[]
}

model VariationType {
  id          String             @id @default(uuid())
  name        String
  arabicName  String?
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  variations  ProductVariation[]
}

model VariationBeans {
  id          String             @id @default(uuid())
  name        String
  arabicName  String?
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  variations  ProductVariation[]
}

model ProductVariation {
  id            String          @id @default(uuid())
  productId     String
  sizeId        String
  typeId        String?
  price         Float
  sku           String?         @unique
  stockQuantity Int             @default(0)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  beansId       String?
  imageUrl      String?
  beans         VariationBeans? @relation(fields: [beansId], references: [id])
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  size          VariationSize   @relation(fields: [sizeId], references: [id])
  type          VariationType?  @relation(fields: [typeId], references: [id])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  subtotal        Float
  tax             Float
  shippingCost    Float
  discount        Float       @default(0)
  total           Float
  status          OrderStatus @default(NEW)
  paymentMethod   String?
  paymentId       String?
  shippingAddress String?
  trackingNumber  String?
  notes           String?
  appliedPromoId  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  appliedPromo    Promotion?  @relation(fields: [appliedPromoId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  subtotal  Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Promotion {
  id             String             @id @default(uuid())
  name           String
  description    String?
  code           String?            @unique
  type           PromotionType
  value          Float              @default(0)
  minOrderAmount Float?
  maxUses        Int?
  currentUses    Int                @default(0)
  isActive       Boolean            @default(true)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  orders         Order[]
  products       ProductPromotion[]
}

model ProductPromotion {
  productId   String
  promotionId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@id([productId, promotionId])
}

model BundleItem {
  id                 String  @id @default(uuid())
  bundleProductId    String
  containedProductId String
  quantity           Int
  discount           Float?
  bundleProduct      Product @relation("BundleProducts", fields: [bundleProductId], references: [id], onDelete: Cascade)
  containedProduct   Product @relation("ContainedInBundle", fields: [containedProductId], references: [id])

  @@unique([bundleProductId, containedProductId])
}

model Slider {
  id              String   @id @default(uuid())
  title           String
  titleAr         String?
  subtitle        String
  subtitleAr      String?
  buttonText      String
  buttonTextAr    String?
  buttonLink      String
  backgroundColor String   @default("#f4f6f8")
  textColor       String?  @default("#111111")
  buttonColor     String?  @default("#111111")
  overlayColor    String?  @default("rgba(0,0,0,0)")
  overlayOpacity  Float?   @default(0)
  overlayImageUrl String?
  imageUrl        String
  order           Int      @default(0)
  isActive        Boolean  @default(true)
  textAnimation   String?  @default("fade-up")
  imageAnimation  String?  @default("fade-in")
  transitionSpeed String?  @default("medium")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PageContent {
  id          String   @id @default(uuid())
  pageType    PageType
  title       String
  titleAr     String?
  content     String   @db.Text
  contentAr   String?  @db.Text
  lastUpdated DateTime @default(now())
  metadata    Json? // For storing additional page-specific data like hero images, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([pageType])
}

enum UserRole {
  ADMIN
  MANAGER
  TEAM
  CUSTOMER
}

enum OrderStatus {
  NEW
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PromotionType {
  BUNDLE
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum PageType {
  PRIVACY_POLICY
  REFUND_POLICY
  TERMS_CONDITIONS
  ABOUT_US
}
