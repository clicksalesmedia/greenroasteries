
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  address: 'address',
  phone: 'phone',
  city: 'city',
  isNewCustomer: 'isNewCustomer',
  lastLoginAt: 'lastLoginAt',
  emailVerified: 'emailVerified',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  module: 'module',
  canView: 'canView',
  canCreate: 'canCreate',
  canEdit: 'canEdit',
  canDelete: 'canDelete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameAr: 'nameAr',
  description: 'description',
  descriptionAr: 'descriptionAr',
  slug: 'slug',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameAr: 'nameAr',
  slug: 'slug',
  description: 'description',
  descriptionAr: 'descriptionAr',
  price: 'price',
  imageUrl: 'imageUrl',
  categoryId: 'categoryId',
  origin: 'origin',
  inStock: 'inStock',
  stockQuantity: 'stockQuantity',
  sku: 'sku',
  weight: 'weight',
  dimensions: 'dimensions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  alt: 'alt',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VariationSizeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  displayName: 'displayName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VariationTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  arabicName: 'arabicName',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VariationBeansScalarFieldEnum = {
  id: 'id',
  name: 'name',
  arabicName: 'arabicName',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  sizeId: 'sizeId',
  typeId: 'typeId',
  price: 'price',
  discount: 'discount',
  discountType: 'discountType',
  sku: 'sku',
  stockQuantity: 'stockQuantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  beansId: 'beansId',
  imageUrl: 'imageUrl'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subtotal: 'subtotal',
  tax: 'tax',
  shippingCost: 'shippingCost',
  discount: 'discount',
  total: 'total',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  shippingAddress: 'shippingAddress',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  city: 'city',
  trackingNumber: 'trackingNumber',
  notes: 'notes',
  appliedPromoId: 'appliedPromoId',
  emailSent: 'emailSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variationId: 'variationId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  paymentProvider: 'paymentProvider',
  stripePaymentIntentId: 'stripePaymentIntentId',
  stripeChargeId: 'stripeChargeId',
  tabbyPaymentId: 'tabbyPaymentId',
  tabbyCheckoutUrl: 'tabbyCheckoutUrl',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  last4: 'last4',
  brand: 'brand',
  receiptUrl: 'receiptUrl',
  failureReason: 'failureReason',
  refundedAmount: 'refundedAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameAr: 'nameAr',
  description: 'description',
  descriptionAr: 'descriptionAr',
  type: 'type',
  cost: 'cost',
  freeShippingThreshold: 'freeShippingThreshold',
  isActive: 'isActive',
  estimatedDays: 'estimatedDays',
  cities: 'cities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  type: 'type',
  value: 'value',
  minOrderAmount: 'minOrderAmount',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductPromotionScalarFieldEnum = {
  productId: 'productId',
  promotionId: 'promotionId'
};

exports.Prisma.BundleItemScalarFieldEnum = {
  id: 'id',
  bundleProductId: 'bundleProductId',
  containedProductId: 'containedProductId',
  quantity: 'quantity',
  discount: 'discount'
};

exports.Prisma.SliderScalarFieldEnum = {
  id: 'id',
  title: 'title',
  titleAr: 'titleAr',
  subtitle: 'subtitle',
  subtitleAr: 'subtitleAr',
  buttonText: 'buttonText',
  buttonTextAr: 'buttonTextAr',
  buttonLink: 'buttonLink',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  buttonColor: 'buttonColor',
  overlayColor: 'overlayColor',
  overlayOpacity: 'overlayOpacity',
  overlayImageUrl: 'overlayImageUrl',
  imageUrl: 'imageUrl',
  order: 'order',
  isActive: 'isActive',
  textAnimation: 'textAnimation',
  imageAnimation: 'imageAnimation',
  transitionSpeed: 'transitionSpeed',
  layout: 'layout',
  accentColor: 'accentColor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferBannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  titleAr: 'titleAr',
  subtitle: 'subtitle',
  subtitleAr: 'subtitleAr',
  buttonText: 'buttonText',
  buttonTextAr: 'buttonTextAr',
  buttonLink: 'buttonLink',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  buttonColor: 'buttonColor',
  overlayColor: 'overlayColor',
  overlayOpacity: 'overlayOpacity',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageContentScalarFieldEnum = {
  id: 'id',
  pageType: 'pageType',
  title: 'title',
  titleAr: 'titleAr',
  content: 'content',
  contentAr: 'contentAr',
  lastUpdated: 'lastUpdated',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  subject: 'subject',
  message: 'message',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailSubscriberScalarFieldEnum = {
  id: 'id',
  email: 'email',
  status: 'status',
  source: 'source',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  unsubscribeToken: 'unsubscribeToken',
  confirmedAt: 'confirmedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackingConfigurationScalarFieldEnum = {
  id: 'id',
  gtmEnabled: 'gtmEnabled',
  gtmContainerId: 'gtmContainerId',
  gtmStatus: 'gtmStatus',
  ga4Enabled: 'ga4Enabled',
  ga4MeasurementId: 'ga4MeasurementId',
  ga4ApiSecret: 'ga4ApiSecret',
  ga4Status: 'ga4Status',
  metaEnabled: 'metaEnabled',
  metaPixelId: 'metaPixelId',
  metaAccessToken: 'metaAccessToken',
  metaStatus: 'metaStatus',
  googleAdsEnabled: 'googleAdsEnabled',
  googleAdsConversionId: 'googleAdsConversionId',
  googleAdsConversionLabel: 'googleAdsConversionLabel',
  googleAdsCustomerId: 'googleAdsCustomerId',
  googleAdsAccessToken: 'googleAdsAccessToken',
  googleAdsStatus: 'googleAdsStatus',
  serverSideEnabled: 'serverSideEnabled',
  facebookConversionsApi: 'facebookConversionsApi',
  googleConversionsApi: 'googleConversionsApi',
  serverSideStatus: 'serverSideStatus',
  dataRetentionDays: 'dataRetentionDays',
  anonymizeIp: 'anonymizeIp',
  cookieConsent: 'cookieConsent',
  debugMode: 'debugMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackingEventScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  sessionId: 'sessionId',
  userId: 'userId',
  eventName: 'eventName',
  eventType: 'eventType',
  platform: 'platform',
  eventData: 'eventData',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  referrer: 'referrer',
  pageUrl: 'pageUrl',
  pageTitle: 'pageTitle',
  transactionId: 'transactionId',
  value: 'value',
  currency: 'currency',
  items: 'items',
  conversionValue: 'conversionValue',
  conversionType: 'conversionType',
  timestamp: 'timestamp',
  clientTimestamp: 'clientTimestamp',
  processed: 'processed',
  processingError: 'processingError'
};

exports.Prisma.CustomEventScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  triggers: 'triggers',
  parameters: 'parameters',
  conversionValue: 'conversionValue',
  trackGA4: 'trackGA4',
  trackFacebook: 'trackFacebook',
  trackGoogleAds: 'trackGoogleAds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomEventInstanceScalarFieldEnum = {
  id: 'id',
  customEventId: 'customEventId',
  sessionId: 'sessionId',
  userId: 'userId',
  parameters: 'parameters',
  value: 'value',
  currency: 'currency',
  pageUrl: 'pageUrl',
  timestamp: 'timestamp'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  configId: 'configId',
  date: 'date',
  pageViews: 'pageViews',
  uniqueVisitors: 'uniqueVisitors',
  sessions: 'sessions',
  bounceRate: 'bounceRate',
  avgSessionDuration: 'avgSessionDuration',
  transactions: 'transactions',
  revenue: 'revenue',
  averageOrderValue: 'averageOrderValue',
  conversionRate: 'conversionRate',
  customEvents: 'customEvents',
  addToCarts: 'addToCarts',
  checkouts: 'checkouts',
  organicTraffic: 'organicTraffic',
  paidTraffic: 'paidTraffic',
  socialTraffic: 'socialTraffic',
  directTraffic: 'directTraffic',
  referralTraffic: 'referralTraffic',
  desktopUsers: 'desktopUsers',
  mobileUsers: 'mobileUsers',
  tabletUsers: 'tabletUsers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversionFunnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  steps: 'steps',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FunnelSessionScalarFieldEnum = {
  id: 'id',
  funnelId: 'funnelId',
  sessionId: 'sessionId',
  userId: 'userId',
  currentStep: 'currentStep',
  completed: 'completed',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  duration: 'duration',
  stepData: 'stepData'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  country: 'country',
  city: 'city',
  device: 'device',
  browser: 'browser',
  os: 'os',
  landingPage: 'landingPage',
  exitPage: 'exitPage',
  pageViews: 'pageViews',
  duration: 'duration',
  cartValue: 'cartValue',
  purchased: 'purchased',
  firstSeen: 'firstSeen',
  lastSeen: 'lastSeen'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  TEAM: 'TEAM',
  CUSTOMER: 'CUSTOMER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  NEW: 'NEW',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentProvider = exports.$Enums.PaymentProvider = {
  STRIPE: 'STRIPE',
  TABBY: 'TABBY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.ShippingType = exports.$Enums.ShippingType = {
  STANDARD: 'STANDARD',
  EXPRESS: 'EXPRESS',
  FREE: 'FREE',
  PICKUP: 'PICKUP'
};

exports.PromotionType = exports.$Enums.PromotionType = {
  BUNDLE: 'BUNDLE',
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  BUY_X_GET_Y: 'BUY_X_GET_Y',
  FREE_SHIPPING: 'FREE_SHIPPING'
};

exports.PageType = exports.$Enums.PageType = {
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  REFUND_POLICY: 'REFUND_POLICY',
  TERMS_CONDITIONS: 'TERMS_CONDITIONS',
  ABOUT_US: 'ABOUT_US'
};

exports.ContactStatus = exports.$Enums.ContactStatus = {
  NEW: 'NEW',
  READ: 'READ',
  REPLIED: 'REPLIED',
  RESOLVED: 'RESOLVED',
  ARCHIVED: 'ARCHIVED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  UNSUBSCRIBED: 'UNSUBSCRIBED',
  BOUNCED: 'BOUNCED',
  COMPLAINED: 'COMPLAINED'
};

exports.TrackingStatus = exports.$Enums.TrackingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ERROR: 'ERROR',
  TESTING: 'TESTING'
};

exports.TrackingEventType = exports.$Enums.TrackingEventType = {
  PAGE_VIEW: 'PAGE_VIEW',
  CLICK: 'CLICK',
  FORM_SUBMIT: 'FORM_SUBMIT',
  PURCHASE: 'PURCHASE',
  ADD_TO_CART: 'ADD_TO_CART',
  REMOVE_FROM_CART: 'REMOVE_FROM_CART',
  BEGIN_CHECKOUT: 'BEGIN_CHECKOUT',
  ADD_PAYMENT_INFO: 'ADD_PAYMENT_INFO',
  SIGN_UP: 'SIGN_UP',
  LOGIN: 'LOGIN',
  SEARCH: 'SEARCH',
  VIEW_ITEM: 'VIEW_ITEM',
  VIEW_CATEGORY: 'VIEW_CATEGORY',
  ADD_TO_WISHLIST: 'ADD_TO_WISHLIST',
  SHARE: 'SHARE',
  DOWNLOAD: 'DOWNLOAD',
  VIDEO_PLAY: 'VIDEO_PLAY',
  VIDEO_COMPLETE: 'VIDEO_COMPLETE',
  CUSTOM: 'CUSTOM'
};

exports.TrackingPlatform = exports.$Enums.TrackingPlatform = {
  GA4: 'GA4',
  FACEBOOK_PIXEL: 'FACEBOOK_PIXEL',
  GOOGLE_ADS: 'GOOGLE_ADS',
  GTM: 'GTM',
  SERVER_SIDE: 'SERVER_SIDE',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Permission: 'Permission',
  Category: 'Category',
  Product: 'Product',
  ProductImage: 'ProductImage',
  VariationSize: 'VariationSize',
  VariationType: 'VariationType',
  VariationBeans: 'VariationBeans',
  ProductVariation: 'ProductVariation',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  ShippingRule: 'ShippingRule',
  Promotion: 'Promotion',
  ProductPromotion: 'ProductPromotion',
  BundleItem: 'BundleItem',
  Slider: 'Slider',
  OfferBanner: 'OfferBanner',
  PageContent: 'PageContent',
  Contact: 'Contact',
  EmailSubscriber: 'EmailSubscriber',
  TrackingConfiguration: 'TrackingConfiguration',
  TrackingEvent: 'TrackingEvent',
  CustomEvent: 'CustomEvent',
  CustomEventInstance: 'CustomEventInstance',
  Analytics: 'Analytics',
  ConversionFunnel: 'ConversionFunnel',
  FunnelSession: 'FunnelSession',
  UserSession: 'UserSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
